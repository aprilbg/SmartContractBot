// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace test_wd_bots.migrations_ETH.hash
{
    [DbContext(typeof(Transaction_DB_eth))]
    partial class Transaction_DB_ethModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ETH_Transaction_Logs", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockNumber")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("data")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("logIndex")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionIndex")
                        .HasColumnType("varchar(1024)");

                    b.HasKey("id");

                    b.ToTable("ETH_Transaction_Logs");
                });

            modelBuilder.Entity("HARD_Transaction_Logs", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockNumber")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("data")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("logIndex")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionIndex")
                        .HasColumnType("varchar(1024)");

                    b.HasKey("id");

                    b.ToTable("HARD_Transaction_Logs");
                });

            modelBuilder.Entity("RAM_Transaction_Logs", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockNumber")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("data")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("logIndex")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionIndex")
                        .HasColumnType("varchar(1024)");

                    b.HasKey("id");

                    b.ToTable("RAM_Transaction_Logs");
                });

            modelBuilder.Entity("SOFT_Transaction_Logs", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockNumber")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("data")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("logIndex")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionIndex")
                        .HasColumnType("varchar(1024)");

                    b.HasKey("id");

                    b.ToTable("SOFT_Transaction_Logs");
                });

            modelBuilder.Entity("SSD_Transaction_Logs", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("blockNumber")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("data")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("logIndex")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionHash")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("transactionIndex")
                        .HasColumnType("varchar(1024)");

                    b.HasKey("id");

                    b.ToTable("SSD_Transaction_Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
